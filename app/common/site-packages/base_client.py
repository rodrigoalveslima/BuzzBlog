# Copyright (C) 2022 Georgia Tech Center for Experimental Research in Computer
# Systems

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


class BaseClient:

  def __init__(self, thrift_service_client_cls, ip_address, port, timeout,
               connection_pool):
    self._ip_address = ip_address
    self._port = port
    self._socket = TSocket.TSocket(ip_address, port)
    self._socket.setTimeout(timeout)
    self._transport = TTransport.TBufferedTransport(self._socket)
    self._protocol = TBinaryProtocol.TBinaryProtocol(self._transport)
    self._tclient = thrift_service_client_cls(self._protocol)
    self._transport.open()
    self._connection_pool = connection_pool

  def __enter__(self):
    return self

  def __exit__(self, exception_type, exception_value, exception_traceback):
    if self._connection_pool:
      self._connection_pool.release_client(self)
    else:
      self.close()

  def __del__(self):
    self.close()

  def close(self):
    self._transport.close()
