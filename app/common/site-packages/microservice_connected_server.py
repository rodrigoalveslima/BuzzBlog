# Copyright (C) 2022 Georgia Tech Center for Experimental Research in Computer
# Systems

import os

import spdlog as spd
import yaml

from buzzblog.account_client import Client as AccountClient
from buzzblog.follow_client import Client as FollowClient
from buzzblog.like_client import Client as LikeClient
from buzzblog.post_client import Client as PostClient
from buzzblog.trending_client import Client as TrendingClient
from buzzblog.microservice_connection_pool import MicroserviceConnectionPool
from buzzblog.utils import RPC_WRAPPER


class MicroserviceConnectedServer:

  def __init__(self, local_service_name, backend_filepath,
               microservice_connection_pool_min_size,
               microservice_connection_pool_max_size,
               microservice_connection_pool_allow_ephemeral, logging):
    # Process backend configuration.
    with open(backend_filepath) as backend_file:
      backend_conf = yaml.safe_load(backend_file)
    # Initialize logger.
    if logging:
      self._rpc_call_logger = spd.FileLogger(
          "rpc_call_logger_%s" % os.getpid(),
          "/tmp/rpc_call_%s.log" % os.getpid())
      self._rpc_call_logger.set_pattern(
          "[%Y-%m-%d %H:%M:%S.%f] pid=%P tid=%t %v")
      rpc_conn_logger = spd.FileLogger("rpc_conn_logger_%s" % os.getpid(),
                                       "/tmp/rpc_conn_%s.log" % os.getpid())
      rpc_conn_logger.set_pattern("[%Y-%m-%d %H:%M:%S.%f] pid=%P tid=%t %v")
    else:
      self._rpc_call_logger = None
      rpc_conn_logger = None
    # Initialize connection pools.
    self._account_cp = MicroserviceConnectionPool(
        local_service_name, "account", AccountClient,
        backend_conf["account"]["service"],
        microservice_connection_pool_min_size,
        microservice_connection_pool_max_size,
        microservice_connection_pool_allow_ephemeral, rpc_conn_logger)
    self._follow_cp = MicroserviceConnectionPool(
        local_service_name, "follow", FollowClient,
        backend_conf["follow"]["service"],
        microservice_connection_pool_min_size,
        microservice_connection_pool_max_size,
        microservice_connection_pool_allow_ephemeral, rpc_conn_logger)
    self._like_cp = MicroserviceConnectionPool(
        local_service_name, "like", LikeClient, backend_conf["like"]["service"],
        microservice_connection_pool_min_size,
        microservice_connection_pool_max_size,
        microservice_connection_pool_allow_ephemeral, rpc_conn_logger)
    self._post_cp = MicroserviceConnectionPool(
        local_service_name, "post", PostClient, backend_conf["post"]["service"],
        microservice_connection_pool_min_size,
        microservice_connection_pool_max_size,
        microservice_connection_pool_allow_ephemeral, rpc_conn_logger)
    self._trending_cp = MicroserviceConnectionPool(
        local_service_name, "trending", TrendingClient,
        backend_conf["trending"]["service"],
        microservice_connection_pool_min_size,
        microservice_connection_pool_max_size,
        microservice_connection_pool_allow_ephemeral, rpc_conn_logger)

  # Account RPCs
  def authenticate_user(self, request_metadata, username, password):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=account rf=authenticate_user ls=apigateway")(
                             account_client.authenticate_user,
                             request_metadata=request_metadata,
                             username=username,
                             password=password)

  def create_account(self, request_metadata, username, password, first_name,
                     last_name):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=account rf=create_account ls=apigateway")(
                             account_client.create_account,
                             request_metadata=request_metadata,
                             username=username,
                             password=password,
                             first_name=first_name,
                             last_name=last_name)

  def retrieve_expanded_account(self, request_metadata, account_id):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(
          self._rpc_call_logger,
          "rs=account rf=retrieve_expanded_account ls=apigateway")(
              account_client.retrieve_expanded_account,
              request_metadata=request_metadata,
              account_id=account_id)

  def update_account(self, request_metadata, account_id, password, first_name,
                     last_name):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=account rf=update_account ls=apigateway")(
                             account_client.update_account,
                             request_metadata=request_metadata,
                             account_id=account_id,
                             password=password,
                             first_name=first_name,
                             last_name=last_name)

  def delete_account(self, request_metadata, account_id):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=account rf=delete_account ls=apigateway")(
                             account_client.delete_account,
                             request_metadata=request_metadata,
                             account_id=account_id)

  def list_accounts(self, request_metadata, query, limit, offset):
    with self._account_cp.get_client() as account_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=account rf=list_accounts ls=apigateway")(
                             account_client.list_accounts,
                             request_metadata=request_metadata,
                             query=query,
                             limit=limit,
                             offset=offset)

  # Follow RPCs
  def follow_account(self, request_metadata, account_id):
    with self._follow_cp.get_client() as follow_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=follow rf=follow_account ls=apigateway")(
                             follow_client.follow_account,
                             request_metadata=request_metadata,
                             account_id=account_id)

  def retrieve_expanded_follow(self, request_metadata, follow_id):
    with self._follow_cp.get_client() as follow_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=follow rf=retrieve_expanded_follow ls=apigateway")(
                             follow_client.retrieve_expanded_follow,
                             request_metadata=request_metadata,
                             follow_id=follow_id)

  def delete_follow(self, request_metadata, follow_id):
    with self._follow_cp.get_client() as follow_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=follow rf=delete_follow ls=apigateway")(
                             follow_client.delete_follow,
                             request_metadata=request_metadata,
                             follow_id=follow_id)

  def list_follows(self, request_metadata, query, limit, offset):
    with self._follow_cp.get_client() as follow_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=follow rf=list_follows ls=apigateway")(
                             follow_client.list_follows,
                             request_metadata=request_metadata,
                             query=query,
                             limit=limit,
                             offset=offset)

  # Like RPCs
  def like_post(self, request_metadata, post_id):
    with self._like_cp.get_client() as like_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=like rf=like_post ls=apigateway")(
                             like_client.like_post,
                             request_metadata=request_metadata,
                             post_id=post_id)

  def retrieve_expanded_like(self, request_metadata, like_id):
    with self._like_cp.get_client() as like_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=like rf=retrieve_expanded_like ls=apigateway")(
                             like_client.retrieve_expanded_like,
                             request_metadata=request_metadata,
                             like_id=like_id)

  def delete_like(self, request_metadata, like_id):
    with self._like_cp.get_client() as like_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=like rf=delete_like ls=apigateway")(
                             like_client.delete_like,
                             request_metadata=request_metadata,
                             like_id=like_id)

  def list_likes(self, request_metadata, query, limit, offset):
    with self._like_cp.get_client() as like_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=like rf=list_likes ls=apigateway")(
                             like_client.list_likes,
                             request_metadata=request_metadata,
                             query=query,
                             limit=limit,
                             offset=offset)

  # Post RPCs
  def create_post(self, request_metadata, text):
    with self._post_cp.get_client() as post_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=post rf=create_post ls=apigateway")(
                             post_client.create_post,
                             request_metadata=request_metadata,
                             text=text)

  def retrieve_expanded_post(self, request_metadata, post_id):
    with self._post_cp.get_client() as post_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=post rf=retrieve_expanded_post ls=apigateway")(
                             post_client.retrieve_expanded_post,
                             request_metadata=request_metadata,
                             post_id=post_id)

  def delete_post(self, request_metadata, post_id):
    with self._post_cp.get_client() as post_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=post rf=delete_post ls=apigateway")(
                             post_client.delete_post,
                             request_metadata=request_metadata,
                             post_id=post_id)

  def list_posts(self, request_metadata, query, limit, offset):
    with self._post_cp.get_client() as post_client:
      return RPC_WRAPPER(self._rpc_call_logger,
                         "rs=post rf=list_posts ls=apigateway")(
                             post_client.list_posts,
                             request_metadata=request_metadata,
                             query=query,
                             limit=limit,
                             offset=offset)

  # Trending RPCs
  def fetch_trending_hashtags(self, request_metadata, limit):
    with self._trending_cp.get_client() as trending_client:
      return RPC_WRAPPER(
          self._rpc_call_logger,
          "rs=trending rf=fetch_trending_hashtags ls=apigateway")(
              trending_client.fetch_trending_hashtags,
              request_metadata=request_metadata,
              limit=limit)
